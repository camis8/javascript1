Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados

GIT e GITHUB#

Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"

git commit  -m "tutorial" (documentar as alterações)
git add . (adiciona ao repositório local)
git push (envia ao repositorio github)

git clone url_do_repositório (clonar um repositório)
git pull (sincroniza as informações do repositório no PC)




Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token



___________________________________________________
Boas práticas na programação
1) Cabeçalho de documentação 
/** (comentario que faz usando esse simbolo)
nome do projeto 
descrição da classe / função
@author Professor José de Assis
@version 1.0
*/

2) nomes de arquivos, variaveis, funções , classes, etc
Regras (clean code)
- Declarar nomes que tenham relação com o problema
- Não usar espaço, "Ç", acentos e caracteres especiais para declaração de nomes (erros internos no programa)
- Só classes iniciam com letra maiuscula 
- Não iniciar um nome com número
- Quando for declarar dois nomes para uma variavel usar a técnica do camelo (camel case)
Exemplo:
nomecliente -> nomeCliente
_______________________________________________________
Comandos básicos do MS-DOS 
cls -> limpar a tela
dir -> listar arquivos e diretorios
cd nome_diretorio -> entrar no diretorio
cd .. -> voltar para o diretorio anterior


_______________________________________________________
Node - Plataforma que permite a execução de Javascript 
fora do navegador (browser)
https://nodejs.org/pt (baixar sempre a versão Lts)

Comandos básicos:
node -v (versão do node)

Gerenciador de pacote para o node:
npm está relacionado a pasta do projeto ou seja os pacotes
 são instalados na raiz do projeto e não no sistema operacional



npm -v  (versão do npm)
npm ls (listar pacotes instalados)

npm init (iniciar um novo projeto JavaScript)
|___  cria um arquivo package.json
npm i nome_do_pacote (INSTALAR UM NOVO PACOTE)
npm r nome_do_pacote (remover um pacote)

json (JavaScript Object Notation)

___________________________________________________
Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante,
 ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar,
 facilitando a manutenção do código.

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e
 modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode 
 variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.


Nas linguagens de programação as variáveis são tipadas ou dinamicamente tipadas

Existem 3 tipos de variáveis:

String -> Armazena caracteres e números
Number -> Armazena números inteiros e não inteiros
Boolean -> True | false



________________________________________________________________________

Comandos JavaScript (Sintaxe)

console.log() -> escrever no console
console.clear() -> Limpar a tela do console
const -> criar (declarar) uma constante
let -> criar (declarar) uma variável
typeof () -> verificar o tipo de variável

switch case (uso de variavel númerica (número inteiro))

switch (variavel) {
    case 1:
    // código o valor da variavel seja 1
    break
    case 2:
    // código caso o vlaor da variavel seja 2 
    break
    default:
    // opcional, o código será executado se nenhum caso for definido
    break
}

switcha case 
Estrutura de controle 
- condicionais
- 
Estruturas de controle - Laços de repetições

for (let i = 1 < 10; i++) {

}

// Laço com número de repetições definidas
// let i = 1 (inicio)
// i < 10 (condição)
// i++ (incremento) i-- (decremento)

Uso do laço for (obrigatório número inteiro)
1) Percorrer uma estrutura de dados (Importante)
2) Simplificar o código (Arduino na próxima aula) 
3) Fazer cálculos levando em conta a variável interna do laço


while (condição) { (primeiro analisa a condição)
     //condição verdadeira
    
}
do {
    //executa o código uma vez independente da condição e depois analisa a condição
} while (condição)
As estruturas while e do-while são estruturas de repetições infinitas, ou seja enquanto a condição for verdadeira o código interno será repetido infinitamente 
__________________________________________________________
POO (Programação orientada a objetos)

objeto -> estrutura de dados

Conceito relacionado a estrutura de dados:
CRUD (Creat Read Update Delete)
São as 4 operações básicas que podemos realizar com a estrutura de dados:
Create: Inserção de dados na estrutura
Read: Pesquisa de dados na estrutura
Update: Alteração de dados na estrutura
Delete: Exclusão de dados 

Pilares da programação orientada objetos
// Reutilização
Abstração
Herança
Polimorfismo

Classe modleo (abstração - herança - polimorfismo)
- Biblioteca nativa do JS
- Biblioteca instalada do node
- Criada pelo usuário usando classe

Observação o ponto "." é usado para acessar atributos e métodos da classe modelo 

// Segurança
Encapsulamento


Observações:
Toda classe modelo obrigatoriamente deve iniciar com letra maiuscula

Dica:
Classe (Biologia)

Lingua Portuguesa:
Objeto (substantivo)
atributo (adjetivo)
Método (verbo)
__________________________________________________________
Estrutura de dados (array, vetor ou lista)
É uma forma especial de trabalhar com variáveis, podendo armazenas mais de um valor em uma única variável.
Para manipular os dados de um vetor usamos o índice que sempre inicia em 0 (zero).

Uso do vetor:
1) Simplificar e minimizar o código 
2) Problemas que precisam armazenar dados em uma sequencia (ex: jogo Genius)
3) estrutura de dados em operações com o banco de dados 


___________________________________________________________________________
Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados

____________________________________________________
MANDAMENTOS DA PROGRAMAÇÃO

1) UX (User eXperience) - desenvolver sempre pensando na experiência do usuário.

Dica de vídeo: https://youtu.be/Z1GNW_woXI0?si=rT8A-7amLsIxuoKW

2) Usar o mínimo possível de código (variáveis, operadores, comparadores, estruturas de controle etc) para resolver o problema (lembrar do marcapasso)

3) Entender o problema. Não adianta sentar na frente do compitador se você não sabe como resolver o problema.
Algoritmo ("receita do bolo")
Conceito:
            variáveis
entrada - processamento - saída

GIT e GITHUB
Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório (clonar um repositório)
git status (verificar o status do repositório local)
git add . (adiciona ao repositório local)
git commit -m "tutorial" (documentar as alterações)
git push (enviar ao repositório GitHub)
git pull (sincroniza as informações do repositório no PC)

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

____________________________________________________
Boas práticas na programação
1) Cabeçalho de documentação
/**
    Nome do projeto
    Descrição da classe / função
    @author Professor José de Assis
    @version 1.0
*/

2) Nomes de arquivos, variáveis, funções, classes, etc
Regras (clean code)
- Declarar nomes que tenham relação com o problema
- Não usar espaço, "ç", acentos e caracteres especiais para declaração de nomes (erros internos no programa)
- Só classes iniciam com letra maiúscula
- Não iniciar um nome com número
- Quando for declarar dois nomes usar a técnica do camelo (camel case) - Usar uma letra maiúscula na segunda palavra
Exemplo
nomecliente -> nomeCliente


____________________________________________________
Comandos básicos do MS-DOS
cls -> limpar a tela
dir -> listar arquivos e diretórios
cd nome_diretório -> entrar no diretório
cd .. -> voltar par ao diretório anterior

____________________________________________________
Node - Plataforma que permite a execução do JavaScript
fora do navegador (browser)
https://nodejs.org/  (baixar sempre a versão LTS)

Comandos básicos:
node -v (versão do node)

Gerenciador de pacote para o node:
npm está relacionado a pasta do projeto ou seja os pacotes são instalados na raiz do projeto e não no sistema operacional

npm -v (versão do npm)
npm ls (listar pacotes instalados)

npm init (iniciar um novo projeto JavaScript)
   |____ package.json

npm i nome_do_pacote (instalar um novo pacote)
npm r nome_do_pacote (remover um pacote)

json (JavaScript Object Notation)

____________________________________________________
Variáveis e constante:

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.


Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, facilitando a manutenção do código.


Nas linguagens de programação as variáveis são tipadas ou dinamicamente tipadas

Existem 3 tipos de variáveis:

String -> Armazena caracteres e números
Number -> Armazena números inteiros e não inteiros
Boolean -> true | false

ATENÇÃO: No JS uma variável pode ser criada usando let 
ou var
var (obsoleto e inseguro), usar sempre o let
_____________________________________________________
Comandos JavaScript (Sintaxe)
console.log() -> escrever no console
console.clear() -> Limpar a tela do console
const -> criar(declarar) uma constante
let -> criar(declarar) uma variável
typeof() -> verificar o tipo de variável

____________________________________________________
Estruturas de controle
- condicionais
- laços de repetições

Estruturas de controle condicionais

if (condição) {
    //condição verdadeira
}


if (condição) {

    ________________________________________________________________________
    mario Arduino
      // melodia (notas musicais)
  int nota[] = {660, 660, 660, 510, 660, 770, 380, 510, 380, 320, 440, 480, 450, 430, 380, 660, 760, 860, 700, 760, 660, 520, 580, 480, 510, 380, 320, 440, 480, 450, 430, 380, 660, 760, 860, 700, 760, 660, 520, 580, 480, 500, 760, 720, 680, 620, 650, 380, 430, 500, 430, 500, 570, 500, 760, 720, 680, 620, 650, 1020, 1020, 1020, 380, 500, 760, 720, 680, 620, 650, 380, 430, 500, 430, 500, 570, 585, 550, 500, 380, 500, 500, 500, 500, 760, 720, 680, 620, 650, 380, 430, 500, 430, 500, 570, 500, 760, 720, 680, 620, 650, 1020, 1020, 1020, 380, 500, 760, 720, 680, 620, 650, 380, 430, 500, 430, 500, 570, 585, 550, 500, 380, 500, 500, 500, 500, 500, 500, 500, 580, 660, 500, 430, 380, 500, 500, 500, 500, 580, 660, 870, 760, 500, 500, 500, 500, 580, 660, 500, 430, 380, 660, 660, 660, 510, 660, 770, 380};
  // duraçao de cada nota da melodia
  int duracaoNota[] = {100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 100, 100, 80, 50, 100, 80, 50, 80, 80, 80, 80, 100, 100, 100, 100, 80, 100, 100, 100, 80, 50, 100, 80, 50, 80, 80, 80, 80, 100, 100, 100, 100, 150, 150, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 150, 200, 80, 80, 80, 100, 100, 100, 100, 100, 150, 150, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 150, 150, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 150, 200, 80, 80, 80, 100, 100, 100, 100, 100, 150, 150, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 60, 80, 60, 80, 80, 80, 80, 80, 80, 60, 80, 60, 80, 80, 80, 80, 80, 60, 80, 60, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100, 100, 100};
  // pausa depois que cada nota da melodia é reproduzida
  int pausaNota[] = {150, 300, 300, 100, 300, 550, 575, 450, 400, 500, 300, 330, 150, 300, 200, 200, 150, 300, 150, 350, 300, 150, 150, 500, 450, 400, 500, 300, 330, 150, 300, 200, 200, 150, 300, 150, 350, 300, 150, 150, 500, 300, 100, 150, 150, 300, 300, 150, 150, 300, 150, 100, 220, 300, 100, 150, 150, 300, 300, 300, 150, 300, 300, 300, 100, 150, 150, 300, 300, 150, 150, 300, 150, 100, 420, 450, 420, 360, 300, 300, 150, 300, 300, 100, 150, 150, 300, 300, 150, 150, 300, 150, 100, 220, 300, 100, 150, 150, 300, 300, 300, 150, 300, 300, 300, 100, 150, 150, 300, 300, 150, 150, 300, 150, 100, 420, 450, 420, 360, 300, 300, 150, 300, 150, 300, 350, 150, 350, 150, 300, 150, 600, 150, 300, 350, 150, 150, 550, 325, 600, 150, 300, 350, 150, 350, 150, 300, 150, 600, 150, 300, 300, 100, 300, 550, 575};
  for (int i = 0; i < 156; i++) {
    tone(6, nota[i], duracaoNota[i]);
    digitalWrite(2, HIGH);
    digitalWrite(3, HIGH);
    digitalWrite(4, HIGH);
    digitalWrite(5, HIGH);
    delay(15);
    digitalWrite(2, LOW);
    digitalWrite(3, LOW);
    digitalWrite(4, LOW);
    digitalWrite(5, LOW);
    delay(pausaNota[i]);
    noTone(6);
  }


________________________________________________________________________

Desafio 1 - Luz de cortesia
Desenvolver uma luz de cortesia, usando um LDR e um LED Branco. No escuro o LED acebde e no claro o LED apaga


Desafio 2 - Sensor de ré
Desenvolver um sensor de ré automotivo usando o sensor ultrassônico HC-SR04 e um buzzer

Distância menor que 30cm, acender um LED vermelho e emitir um alerta sonoro
______________________________________________________________________________

Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados

____________________________________________________
MANDAMENTOS DA PROGRAMAÇÃO

1) UX (User eXperience) - desenvolver sempre pensando na experiência do usuário.

Dica de vídeo: https://youtu.be/Z1GNW_woXI0?si=rT8A-7amLsIxuoKW

2) Usar o mínimo possível de código (variáveis, operadores, comparadores, estruturas de controle etc) para resolver o problema (lembrar do marcapasso)

3) Entender o problema. Não adianta sentar na frente do compitador se você não sabe como resolver o problema.
Algoritmo ("receita do bolo")
Conceito:
            variáveis
entrada - processamento - saída

GIT e GITHUB
Comandos básicos do git:
git config --global user.name "Seu nome"
git config --global user.email "seuemail@email.com"
git clone url_do_repositório (clonar um repositório)
git status (verificar o status do repositório local)
git add . (adiciona ao repositório local)
git commit -m "tutorial" (documentar as alterações)
git push (enviar ao repositório GitHub)
git pull (sincroniza as informações do repositório no PC)

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token

____________________________________________________
Boas práticas na programação
1) Cabeçalho de documentação
/**
    Nome do projeto
    Descrição da classe / função
    @author Professor José de Assis
    @version 1.0
*/

2) Nomes de arquivos, variáveis, funções, classes, etc
Regras (clean code)
- Declarar nomes que tenham relação com o problema
- Não usar espaço, "ç", acentos e caracteres especiais para declaração de nomes (erros internos no programa)
- Só classes iniciam com letra maiúscula
- Não iniciar um nome com número
- Quando for declarar dois nomes usar a técnica do camelo (camel case) - Usar uma letra maiúscula na segunda palavra
Exemplo
nomecliente -> nomeCliente


____________________________________________________
Comandos básicos do MS-DOS
cls -> limpar a tela
dir -> listar arquivos e diretórios
cd nome_diretório -> entrar no diretório
cd .. -> voltar par ao diretório anterior

____________________________________________________
Node - Plataforma que permite a execução do JavaScript
fora do navegador (browser)
https://nodejs.org/  (baixar sempre a versão LTS)

Comandos básicos:
node -v (versão do node)

Gerenciador de pacote para o node:
npm está relacionado a pasta do projeto ou seja os pacotes são instalados na raiz do projeto e não no sistema operacional

npm -v (versão do npm)
npm ls (listar pacotes instalados)

npm init (iniciar um novo projeto JavaScript)
   |____ package.json

npm i nome_do_pacote (instalar um novo pacote)
npm r nome_do_pacote (remover um pacote)

json (JavaScript Object Notation)

____________________________________________________
Variáveis e constante:

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.


Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.
Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, facilitando a manutenção do código.


Nas linguagens de programação as variáveis são tipadas ou dinamicamente tipadas

Existem 3 tipos de variáveis:

String -> Armazena caracteres e números
Number -> Armazena números inteiros e não inteiros
Boolean -> true | false

ATENÇÃO: No JS uma variável pode ser criada usando let 
ou var
var (obsoleto e inseguro), usar sempre o let
_____________________________________________________
Comandos JavaScript (Sintaxe)
console.log() -> escrever no console
console.clear() -> Limpar a tela do console
const -> criar(declarar) uma constante
let -> criar(declarar) uma variável
typeof() -> verificar o tipo de variável

____________________________________________________
Estruturas de controle
- condicionais
- laços de repetições

Estruturas de controle condicionais

if (condição) {
    //condição verdadeira
}


if (condição) {
    //condição verdadeira
} else {
    //condição falsa
}

Observações:
1) Uma condição nunca pode ser verdadeira e falsa simultaneamente.
2) No uso do if-else sempre uma das condições será processada.

if (condição 1) {
    //condição 1 verdadeira
} else if (condição 2) {
    //condição 2 verdadeira
} else {
    //condição falsa
}

Obs: Nesta estrutura o else é opcional, porém se indicado caso não nenhuma condição for verdadeira ele obrigatóriamente executará o que estiver no else.

switch case (uso de variável numérica (número inteiro))

switch (variável) {
    case 1:
        // código caso o valor da variável seja 1
        break
    case 2:
        // código caso o valor da variável seja 2
        break
    default:
        // opcional, o código será executado se nenhum caso for definido
        break
}
---------------------------------------------------------------------------------------
